generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model customer {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  left_at         DateTime?    @db.Timestamp(6)
  status          String?      @db.VarChar(255)
  role            String?      @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model customer_service_representative {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  left_at         DateTime?    @db.Timestamp(6)
  status          String?      @db.VarChar(255)
  role            String?      @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                     String?                           @db.VarChar(255)
  name                            String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  user_id                         String                            @db.Uuid
  tenant_id                       String                            @db.VarChar(255)
  customer                        customer[]
  customer_service_representative customer_service_representative[]
  user                            user                              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recharge_coupon                 recharge_coupon[]
  team_member                     team_member[]
}

model recharge_coupon {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  price           Int
  validity        Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_member {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  left_at         DateTime?    @db.Timestamp(6)
  status          String?      @db.VarChar(255)
  role            String?      @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String                            @unique @db.VarChar(255)
  firstName                       String?                           @db.VarChar(255)
  lastName                        String?                           @db.VarChar(255)
  roq_user_id                     String                            @db.VarChar(255)
  tenant_id                       String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  customer                        customer[]
  customer_service_representative customer_service_representative[]
  organization                    organization[]
  team_member                     team_member[]
}
